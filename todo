#!/usr/bin/python

import os
import argparse

def printFile(path):
    with open(path, "r") as file:
        contents = file.read()
        print(contents)


def addElement(path, x):
    with open(path, "a+") as file:
        file.seek(0)
        lines = file.readlines()
        number = len(lines)
        
        numberedLine = f"\n{number}. {x}"
        file.write(numberedLine + "\u200B") # adds 0 width space to stop strikethrough from missing last character


def strike(text):
    result = ''
    for c in text:
        if c == text[-1]: # exclude \n as it leads to the line after being removed
            result = result + c
        else:
            result = result + c + "\u0336"
    return result


def completeElement(path, x):
    with open(path, "r") as file:
        lines = file.readlines()
    
    # checks if line number is valid
    if x < 1 or x > len(lines):
        print("Invalid line number!")
        return

    lines[x] = strike(lines[x])

    with open(path, "w") as file:
        file.writelines(lines)


def resetLineNumbers(path):
    output = []

    with open(path, "r") as file:
        lines = file.readlines()
        output.append(lines[0])

        for i, line in enumerate(lines[1:], start=1): # exlude 1st line
            withoutNumber = line.split(". ", 1)[-1]
            numbered = f"{i}. {withoutNumber}"
            output.append(numbered)
    
    # Check if the last line ends with a newline character
    if output[-1].endswith("\n"):
        output[-1] = output[-1].rstrip("\n")

    with open(path, "w") as file:
        file.writelines(output)


def clearElements(path):
    output = []
    with open(path, "r") as file:
        lines = file.readlines()

    for i in lines:
        if "\u0336" not in i:
            output.append(i)
        else:
            print("removing", i)

    with open(path, "w") as file:
        file.writelines(output)


def clearAll(path):
    with open(path, "w") as file:
        file.write("TODO:")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='A simple utility for managing tasks') 
    
    # Define command-line arguments with descriptions
    parser.add_argument("command", choices=["show", "add", "complete", "clear", "clearall"], default="show",
                        help="The command to execute: 'add', 'complete', 'clear', 'number', or 'list'")
    parser.add_argument("additional_args", nargs="*", help="Additional arguments for the command") 
    parser.add_argument("-p", "--path", default=os.path.expanduser("~") + "/.todo.txt", metavar="PATH", help="Path to your text file")
    
    args = parser.parse_args()

    
    if os.path.isfile(args.path) == False:
        print("todo.txt is missing creating new file")
        clearAll(args.path)
    

    # Perform actions based on the command
    if args.command == "show":
        printFile(args.path)

    elif args.command == "add":
        add = " ".join(args.additional_args)
        addElement(args.path, add)
        printFile(args.path)

    elif args.command == "complete":
        line = int(args.additional_args[0])
        completeElement(args.path, line)
        printFile(args.path)

    elif args.command == "clear":
        clearElements(args.path)
        resetLineNumbers(args.path)
        printFile(args.path)

    elif args.command == "clearall":
        clearAll(args.path)
        printFile(args.path)

    elif args.command == "number":
        resetLineNumbers(args.path)


